{"ast":null,"code":"import { Directive, ElementRef, Input, NgModule } from '@angular/core';\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Keeps track scripts that have been requested by loadScript.\n */\n\nimport * as Éµngcc0 from '@angular/core';\nlet cachedScripts = {};\n/**\n * Asynchronously loads a script keeping track of which scripts have already\n * requested and loaded.\n *\n * Multiple requests to the same resource will return the same promise.\n *\n * @param src Script URL to load\n */\n\nfunction loadScript(src) {\n  const existing = cachedScripts[src];\n\n  if (existing) {\n    return existing;\n  }\n\n  const promise = new Promise((resolve, reject) => {\n    // Create script\n    const script = document.createElement('script');\n    script.src = src;\n    script.async = true; // Script event listener callbacks for load and error\n\n    const onScriptLoad = () => {\n      resolve();\n    };\n\n    const onScriptError = () => {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      cleanup(); // Remove from cachedScripts so that we can try loading again\n\n      delete cachedScripts[src];\n      script.remove();\n      reject(new Error(`Unable to load script ${src}`));\n    };\n\n    script.addEventListener('load', onScriptLoad);\n    script.addEventListener('error', onScriptError); // Add script to document body\n\n    document.body.appendChild(script); // Remove event listeners on cleanup\n\n    function cleanup() {\n      script.removeEventListener('load', onScriptLoad);\n      script.removeEventListener('error', onScriptError);\n    }\n  });\n  cachedScripts[src] = promise;\n  return promise;\n}\n/**\n * Clears the script cache. Used for testing purposes only.\n */\n\n\nfunction clearScriptCache() {\n  cachedScripts = {};\n}\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/**\n * Manages the lifecycle of the Google Pay button.\n *\n * Includes lifecycle management of the `PaymentsClient` instance,\n * `isReadyToPay`, `onClick`, `loadPaymentData`, and other callback methods.\n */\n\n\nclass ButtonManager {\n  constructor(options) {\n    /**\n     * Handles the click event of the Google Pay button.\n     *\n     * This method would normally be private but has been made public for\n     * testing purposes.\n     *\n     * @private\n     */\n    this.handleClick = event => __awaiter(this, void 0, void 0, function* () {\n      const config = this.config;\n\n      if (!config) {\n        throw new Error('google-pay-button: Missing configuration');\n      }\n\n      const request = this.createLoadPaymentDataRequest(config);\n\n      try {\n        if (config.onClick) {\n          config.onClick(event);\n        }\n\n        if (event.defaultPrevented) {\n          return;\n        }\n\n        const result = yield this.client.loadPaymentData(request);\n\n        if (config.onLoadPaymentData) {\n          config.onLoadPaymentData(result);\n        }\n      } catch (err) {\n        if (err.statusCode === 'CANCELED') {\n          if (config.onCancel) {\n            config.onCancel(err);\n          }\n        } else if (config.onError) {\n          config.onError(err);\n        } else {\n          console.error(err);\n        }\n      }\n    });\n\n    this.options = options;\n  }\n\n  getElement() {\n    return this.element;\n  }\n\n  isGooglePayLoaded() {\n    var _a, _b;\n\n    return 'google' in (window || global) && !!((_b = (_a = google === null || google === void 0 ? void 0 : google.payments) === null || _a === void 0 ? void 0 : _a.api) === null || _b === void 0 ? void 0 : _b.PaymentsClient);\n  }\n\n  mount(element) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.isGooglePayLoaded()) {\n        yield loadScript('https://pay.google.com/gp/p/js/pay.js');\n      }\n\n      this.element = element;\n\n      if (element) {\n        this.appendStyles();\n\n        if (this.config) {\n          this.updateElement();\n        }\n      }\n    });\n  }\n\n  unmount() {\n    this.element = undefined;\n  }\n\n  configure(newConfig) {\n    let promise = undefined;\n    this.config = newConfig;\n\n    if (!this.oldInvalidationValues || this.isClientInvalidated(newConfig)) {\n      promise = this.updateElement();\n    }\n\n    this.oldInvalidationValues = this.getInvalidationValues(newConfig);\n    return promise !== null && promise !== void 0 ? promise : Promise.resolve();\n  }\n  /**\n   * Creates client configuration options based on button configuration\n   * options.\n   *\n   * This method would normally be private but has been made public for\n   * testing purposes.\n   *\n   * @private\n   */\n\n\n  createClientOptions(config) {\n    const clientConfig = {\n      environment: config.environment,\n      merchantInfo: this.createMerchantInfo(config)\n    };\n\n    if (config.onPaymentDataChanged || config.onPaymentAuthorized) {\n      clientConfig.paymentDataCallbacks = {};\n\n      if (config.onPaymentDataChanged) {\n        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n        clientConfig.paymentDataCallbacks.onPaymentDataChanged = paymentData => {\n          const result = config.onPaymentDataChanged(paymentData);\n          return result || {};\n        };\n      }\n\n      if (config.onPaymentAuthorized) {\n        // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n        clientConfig.paymentDataCallbacks.onPaymentAuthorized = paymentData => {\n          const result = config.onPaymentAuthorized(paymentData);\n          return result || {};\n        };\n      }\n    }\n\n    return clientConfig;\n  }\n\n  createIsReadyToPayRequest(config) {\n    const paymentRequest = config.paymentRequest;\n    const request = {\n      apiVersion: paymentRequest.apiVersion,\n      apiVersionMinor: paymentRequest.apiVersionMinor,\n      allowedPaymentMethods: paymentRequest.allowedPaymentMethods,\n      existingPaymentMethodRequired: config.existingPaymentMethodRequired\n    };\n    return request;\n  }\n  /**\n   * Constructs `loadPaymentData` request object based on button configuration.\n   *\n   * It infers request properties like `shippingAddressRequired`,\n   * `shippingOptionRequired`, and `billingAddressRequired` if not already set\n   * based on the presence of their associated options and parameters. It also\n   * infers `callbackIntents` based on the callback methods defined in button\n   * configuration.\n   *\n   * This method would normally be private but has been made public for\n   * testing purposes.\n   *\n   * @private\n   */\n\n\n  createLoadPaymentDataRequest(config) {\n    const request = Object.assign(Object.assign({}, config.paymentRequest), {\n      merchantInfo: this.createMerchantInfo(config)\n    }); // TODO: #13 re-enable inferrence if/when we agree as a team\n\n    return request;\n  }\n\n  createMerchantInfo(config) {\n    const merchantInfo = Object.assign({}, config.paymentRequest.merchantInfo); // apply softwareInfo if not set\n\n    if (!merchantInfo.softwareInfo) {\n      merchantInfo.softwareInfo = {\n        id: this.options.softwareInfoId,\n        version: this.options.softwareInfoVersion\n      };\n    }\n\n    return merchantInfo;\n  }\n\n  isMounted() {\n    return this.element != null && this.element.isConnected !== false;\n  }\n\n  removeButton() {\n    if (this.element instanceof ShadowRoot || this.element instanceof Element) {\n      for (const child of Array.from(this.element.children)) {\n        if (child.tagName !== 'STYLE') {\n          child.remove();\n        }\n      }\n    }\n  }\n\n  updateElement() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.isMounted()) return;\n      const element = this.getElement();\n\n      if (!this.config) {\n        throw new Error('google-pay-button: Missing configuration');\n      } // remove existing button\n\n\n      this.removeButton();\n      this.client = new google.payments.api.PaymentsClient(this.createClientOptions(this.config));\n      const buttonOptions = {\n        buttonType: this.config.buttonType,\n        buttonColor: this.config.buttonColor,\n        buttonSizeMode: this.config.buttonSizeMode,\n        buttonLocale: this.config.buttonLocale,\n        onClick: this.handleClick,\n        allowedPaymentMethods: this.config.paymentRequest.allowedPaymentMethods\n      };\n      const rootNode = element.getRootNode();\n\n      if (rootNode instanceof ShadowRoot) {\n        buttonOptions.buttonRootNode = rootNode;\n      } // pre-create button\n\n\n      const button = this.client.createButton(buttonOptions);\n      this.setClassName(element, [element.className, 'not-ready']);\n      element.appendChild(button);\n      let showButton = false;\n      let readyToPay;\n\n      try {\n        readyToPay = yield this.client.isReadyToPay(this.createIsReadyToPayRequest(this.config));\n        showButton = readyToPay.result && !this.config.existingPaymentMethodRequired || readyToPay.result && readyToPay.paymentMethodPresent && this.config.existingPaymentMethodRequired || false;\n      } catch (err) {\n        if (this.config.onError) {\n          this.config.onError(err);\n        } else {\n          console.error(err);\n        }\n      }\n\n      if (!this.isMounted()) return;\n\n      if (showButton) {\n        try {\n          this.client.prefetchPaymentData(this.createLoadPaymentDataRequest(this.config));\n        } catch (err) {\n          console.log('Error with prefetch', err);\n        } // remove hidden className\n\n\n        this.setClassName(element, (element.className || '').split(' ').filter(className => className && className !== 'not-ready'));\n      }\n\n      if (this.isReadyToPay !== (readyToPay === null || readyToPay === void 0 ? void 0 : readyToPay.result) || this.paymentMethodPresent !== (readyToPay === null || readyToPay === void 0 ? void 0 : readyToPay.paymentMethodPresent)) {\n        this.isReadyToPay = !!(readyToPay === null || readyToPay === void 0 ? void 0 : readyToPay.result);\n        this.paymentMethodPresent = readyToPay === null || readyToPay === void 0 ? void 0 : readyToPay.paymentMethodPresent;\n\n        if (this.config.onReadyToPayChange) {\n          const readyToPayResponse = {\n            isButtonVisible: showButton,\n            isReadyToPay: this.isReadyToPay\n          };\n\n          if (this.paymentMethodPresent) {\n            readyToPayResponse.paymentMethodPresent = this.paymentMethodPresent;\n          }\n\n          this.config.onReadyToPayChange(readyToPayResponse);\n        }\n      }\n    });\n  }\n\n  setClassName(element, classNames) {\n    const className = classNames.filter(name => name).join(' ');\n\n    if (className) {\n      element.className = className;\n    } else {\n      element.removeAttribute('class');\n    }\n  }\n\n  appendStyles() {\n    var _a, _b, _c;\n\n    if (typeof document === 'undefined') return;\n    const rootNode = (_a = this.element) === null || _a === void 0 ? void 0 : _a.getRootNode();\n    const styleId = `default-google-style-${this.options.cssSelector.replace(/[^\\w-]+/g, '')}-${(_b = this.config) === null || _b === void 0 ? void 0 : _b.buttonLocale}`; // initialize styles if rendering on the client:\n\n    if (rootNode) {\n      if (!((_c = rootNode.getElementById) === null || _c === void 0 ? void 0 : _c.call(rootNode, styleId))) {\n        const style = document.createElement('style');\n        style.id = styleId;\n        style.type = 'text/css';\n        style.innerHTML = `\n          ${this.options.cssSelector} {\n            display: inline-block;\n          }\n          ${this.options.cssSelector}.not-ready {\n            width: 0;\n            height: 0;\n            overflow: hidden;\n          }\n        `;\n\n        if (rootNode instanceof Document && rootNode.head) {\n          rootNode.head.appendChild(style);\n        } else {\n          rootNode.appendChild(style);\n        }\n      }\n    }\n  }\n\n  isClientInvalidated(newConfig) {\n    if (!this.oldInvalidationValues) return true;\n    const newValues = this.getInvalidationValues(newConfig);\n    return newValues.some((value, index) => value !== this.oldInvalidationValues[index]);\n  }\n\n  getInvalidationValues(config) {\n    var _a, _b;\n\n    return [config.environment, config.existingPaymentMethodRequired, !!config.onPaymentDataChanged, !!config.onPaymentAuthorized, config.buttonColor, config.buttonType, config.buttonLocale, config.buttonSizeMode, config.paymentRequest.merchantInfo.merchantId, config.paymentRequest.merchantInfo.merchantName, (_a = config.paymentRequest.merchantInfo.softwareInfo) === null || _a === void 0 ? void 0 : _a.id, (_b = config.paymentRequest.merchantInfo.softwareInfo) === null || _b === void 0 ? void 0 : _b.version, config.paymentRequest.allowedPaymentMethods];\n  }\n\n}\n\nvar name = \"@google-pay/button-angular\";\nvar version = \"3.0.0\";\nvar description = \"Angular component for Google Pay button\";\nvar main = \"dist/index.js\";\nvar repository = {\n  type: \"git\",\n  url: \"https://github.com/google-pay/google-pay-button\",\n  directory: \"src/button-angular\"\n};\nvar homepage = \"https://github.com/google-pay/google-pay-button/tree/main/src/button-angular#readme\";\nvar engines = {\n  node: \">=8.0.0\"\n};\nvar author = \"socsieng@google.com\";\nvar license = \"Apache-2.0\";\nvar scripts = {\n  build: \"ng build --configuration production\"\n};\nvar dependencies = {\n  \"@types/googlepay\": \"^0.6.3\"\n};\nvar peerDependencies = {\n  \"@angular/core\": \">=8.0.0\",\n  \"@types/googlepay\": \"^0.6.3\"\n};\nvar files = [\"dist/*\", \"bundles/*\", \"ems2015/*\", \"fesm2015/*\", \"lib/*\", \"button-angular/*\", \"google-pay-button-angular.*\", \"*.d.ts\", \"*.json\", \"README.md\"];\nvar keywords = [\"googlepay\", \"google-pay\", \"google-pay-button\", \"button\", \"angular\"];\nvar devDependencies = {\n  \"@angular-devkit/build-ng-packagr\": \"^0.1002.0\",\n  \"@angular/core\": \"^10.2.2\",\n  \"ng-packagr\": \"^10.1.2\"\n};\nvar _package = {\n  name: name,\n  version: version,\n  description: description,\n  main: main,\n  repository: repository,\n  homepage: homepage,\n  engines: engines,\n  author: author,\n  license: license,\n  scripts: scripts,\n  dependencies: dependencies,\n  peerDependencies: peerDependencies,\n  files: files,\n  keywords: keywords,\n  devDependencies: devDependencies\n};\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a new function that delays invocations to the original function\n * within a specified wait period. The last invocation within this time period\n * gets invoked. All earlier invocations are ignore.\n *\n * @param func The function to invoke.\n * @param wait The time in milliseconds to wait for idle invocations.\n */\n\nfunction debounce(func, wait = 0) {\n  let timeout;\n  return function (...args) {\n    window.clearTimeout(timeout);\n\n    const later = function () {\n      timeout = undefined;\n      return func(...args);\n    };\n\n    return new Promise(resolve => {\n      timeout = window.setTimeout(() => {\n        const result = later();\n        resolve(result);\n      }, wait);\n    });\n  };\n}\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nlet GooglePayButtonComponent = /*#__PURE__*/(() => {\n  class GooglePayButtonComponent {\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n      this.manager = new ButtonManager({\n        cssSelector: 'google-pay-button',\n        softwareInfoId: name,\n        softwareInfoVersion: version\n      });\n      this.initializeButton = debounce(() => {\n        if (!this.assertRequiredProperty('paymentRequest')) {\n          return;\n        }\n\n        if (!this.assertRequiredProperty('environment')) {\n          return;\n        }\n\n        const config = {\n          paymentRequest: this.paymentRequest,\n          environment: this.environment,\n          existingPaymentMethodRequired: this.existingPaymentMethodRequired,\n          onPaymentDataChanged: this.paymentDataChangedCallback,\n          onPaymentAuthorized: this.paymentAuthorizedCallback,\n          buttonColor: this.buttonColor,\n          buttonType: this.buttonType,\n          buttonSizeMode: this.buttonSizeMode,\n          buttonLocale: this.buttonLocale,\n          onReadyToPayChange: result => {\n            if (this.readyToPayChangeCallback) {\n              this.readyToPayChangeCallback(result);\n            }\n\n            this.dispatch('readytopaychange', result);\n          },\n          onCancel: reason => {\n            if (this.cancelCallback) {\n              this.cancelCallback(reason);\n            }\n\n            this.dispatch('cancel', reason);\n          },\n          onError: error => {\n            var _a;\n\n            if (this.errorCallback) {\n              (_a = this.errorCallback) === null || _a === void 0 ? void 0 : _a.call(this, error);\n            }\n\n            this.elementRef.nativeElement.dispatchEvent(new ErrorEvent('error', {\n              error\n            }));\n          },\n          onLoadPaymentData: paymentData => {\n            if (this.loadPaymentDataCallback) {\n              this.loadPaymentDataCallback(paymentData);\n            }\n\n            this.dispatch('loadpaymentdata', paymentData);\n          },\n          onClick: event => {\n            var _a;\n\n            if (this.clickCallback) {\n              (_a = this.clickCallback) === null || _a === void 0 ? void 0 : _a.call(this, event);\n            }\n          }\n        };\n        this.manager.configure(config);\n      });\n    }\n\n    get isReadyToPay() {\n      return this.manager.isReadyToPay;\n    }\n\n    ngOnInit() {\n      return this.manager.mount(this.elementRef.nativeElement);\n    }\n\n    ngOnChanges() {\n      return this.initializeButton();\n    }\n\n    assertRequiredProperty(name) {\n      const value = this[name];\n\n      if (value === null || value === undefined) {\n        this.throwError(Error(`Required property not set: ${name}`));\n        return false;\n      }\n\n      return true;\n    }\n    /**\n     * Throws an error.\n     *\n     * Used for testing purposes so that the method can be spied on.\n     */\n\n\n    throwError(error) {\n      throw error;\n    }\n\n    dispatch(type, detail) {\n      this.elementRef.nativeElement.dispatchEvent(new CustomEvent(type, {\n        bubbles: true,\n        cancelable: false,\n        detail\n      }));\n    }\n\n  }\n\n  GooglePayButtonComponent.Éµfac = function GooglePayButtonComponent_Factory(t) {\n    return new (t || GooglePayButtonComponent)(Éµngcc0.ÉµÉµdirectiveInject(Éµngcc0.ElementRef));\n  };\n\n  GooglePayButtonComponent.Éµdir = /*@__PURE__*/Éµngcc0.ÉµÉµdefineDirective({\n    type: GooglePayButtonComponent,\n    selectors: [[\"google-pay-button\"]],\n    inputs: {\n      paymentRequest: \"paymentRequest\",\n      environment: \"environment\",\n      existingPaymentMethodRequired: \"existingPaymentMethodRequired\",\n      buttonColor: \"buttonColor\",\n      buttonType: \"buttonType\",\n      buttonSizeMode: \"buttonSizeMode\",\n      buttonLocale: \"buttonLocale\",\n      paymentDataChangedCallback: \"paymentDataChangedCallback\",\n      paymentAuthorizedCallback: \"paymentAuthorizedCallback\",\n      readyToPayChangeCallback: \"readyToPayChangeCallback\",\n      loadPaymentDataCallback: \"loadPaymentDataCallback\",\n      cancelCallback: \"cancelCallback\",\n      errorCallback: \"errorCallback\",\n      clickCallback: \"clickCallback\"\n    },\n    features: [Éµngcc0.ÉµÉµNgOnChangesFeature]\n  });\n  return GooglePayButtonComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nlet GooglePayButtonModule = /*#__PURE__*/(() => {\n  class GooglePayButtonModule {}\n\n  GooglePayButtonModule.Éµfac = function GooglePayButtonModule_Factory(t) {\n    return new (t || GooglePayButtonModule)();\n  };\n\n  GooglePayButtonModule.Éµmod = /*@__PURE__*/Éµngcc0.ÉµÉµdefineNgModule({\n    type: GooglePayButtonModule\n  });\n  GooglePayButtonModule.Éµinj = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjector({\n    imports: [[]]\n  });\n  return GooglePayButtonModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(GooglePayButtonModule, {\n    declarations: [GooglePayButtonComponent],\n    exports: [GooglePayButtonComponent]\n  });\n})();\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { GooglePayButtonComponent, GooglePayButtonModule }; //# sourceMappingURL=google-pay-button-angular.js.map","map":null,"metadata":{},"sourceType":"module"}